/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.filetransferwithui.connections;

import com.mycompany.filetransferwithui.helpers.Helpers;
import com.mycompany.filetransferwithui.interfaces.ITcpIp;
import com.mycompany.filetransferwithui.interfaces.ITcpIpObserver;
import com.mycompany.filetransferwithui.models.AppSettings;
import com.mycompany.filetransferwithui.models.FileItemModel;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.commons.io.FileUtils;

/**
 *
 * @author Mustafa Erdem Köşk<erdemkosk@gmail.com>
 */
public class TcpConnections implements ITcpIp {

    protected long totalTransferedBytesInoneSecondSend = 0;
    protected long totalTransferedBytesInoneSecondGet = 0;
    protected int countSend = 0;
    protected int countGet = 0;
    protected long deltaTimeGet = 0;
    protected long deltaTimePost = 0;
    protected Timer timerGet;
    protected Timer timerPost;
    protected Thread thread;
    protected String threadName;
    protected Socket socket = null;
    protected AppSettings setting;
    protected String folderPath;
    protected boolean isRunning = true;
    protected boolean isReadyForSendFile = true;
    protected int portNumber;
    protected ArrayList<ITcpIpObserver> observers = new ArrayList<ITcpIpObserver>();
    protected BlockingQueue<FileItemModel> fileQueue;
    protected BufferedInputStream bis;
    protected DataInputStream dis;

    protected void runTimerGet(FileItemModel model) {
        timerGet = new Timer();

        timerGet.scheduleAtFixedRate(new TimerTask() {

            @Override
            public void run() {

                deltaTimeGet++;

                long transferSpeed = totalTransferedBytesInoneSecondGet;
                totalTransferedBytesInoneSecondGet = 0;

                model.setTime(Helpers.convertSecondsToHMmSs(deltaTimeGet));
                model.setTransferSpeed(FileUtils.byteCountToDisplaySize(transferSpeed).toLowerCase(Locale.ENGLISH) + "/s");
            }
        }, 0, 1000);

    }

    protected void stopTimerGet() {

        deltaTimeGet = 0;
        timerGet.cancel();
    }

    protected void runTimerPost(FileItemModel model) {
        timerPost = new Timer();

        timerPost.scheduleAtFixedRate(new TimerTask() {

            @Override
            public void run() {

                deltaTimePost++;

                long transferSpeed = totalTransferedBytesInoneSecondSend;
                totalTransferedBytesInoneSecondSend = 0;

                model.setTime(Helpers.convertSecondsToHMmSs(deltaTimePost));
                model.setTransferSpeed(FileUtils.byteCountToDisplaySize(transferSpeed).toLowerCase(Locale.ENGLISH) + "/s");
            }
        }, 0, 1000);

    }

    protected void stopTimerPost() {

        deltaTimePost = 0;
        timerPost.cancel();
    }

    public ArrayList<FileItemModel> generateItemModels(List<File> fileList) throws IOException {
        ArrayList<FileItemModel> models = new ArrayList<>();
        BufferedOutputStream bos = new BufferedOutputStream(socket.getOutputStream());
        DataOutputStream dos = new DataOutputStream(bos);
        for (File file : fileList) {
            long length = file.length();
            dos.writeLong(length);

            String name = file.getName();
            dos.writeUTF(name);
            FileItemModel model = new FileItemModel(name, 0, "00:00", "Waiting", file);
            notifyPostObserversNewFileRequested(model);
            models.add(model);
        }

        return models;
    }

    public void sendFileToConnection() throws IOException {
        new Thread() {
            public void run() {
                while (true) {
                    try {
                        FileItemModel model = fileQueue.take();

                        isReadyForSendFile = false; // suan işlem yapıyor bekl
                        if (model == null) {
                            break;
                        }
                        BufferedOutputStream bos = null;
                        try {
                            bos = new BufferedOutputStream(socket.getOutputStream());
                            DataOutputStream dos = new DataOutputStream(bos);
                            String name = model.getFileName();
                            dos.writeUTF(name);

                            long length = model.getFile().length();
                            dos.writeLong(length);

                            runTimerPost(model);
                            //notifyNewFileRequested(model);

                            FileInputStream fis = new FileInputStream(model.getFile());

                            //buffer for file writing, to declare inside or outside loop?
                            int n = 0;
                            double pertange = 0;
                            double totalRead = 0;

                            byte[] buf = new byte[4096];

                            while ((n = fis.read(buf)) != -1) {
                                bos.write(buf, 0, n);
                                bos.flush();
                                totalRead += n;
                                totalTransferedBytesInoneSecondSend += n;
                                pertange = (totalRead * 100) / length;

                                int pertangeFormated = Integer.parseInt(new DecimalFormat("###").format(pertange));
                                countSend++;
                                if (countSend % 5 == 0 || pertangeFormated == 100) {
                                    notifyPostObserversPercentageChanged(model, pertangeFormated);
                                    countSend = 0;
                                }

                            }
                            model.setTransferSpeed("Completed!");
                            stopTimerPost();
                            totalTransferedBytesInoneSecondSend = 0;
                            //System.out.println("Sending " + file.length() / (1024 * 1024) + " mb in " + totalTime / (1000 * 60) + " m");
                            //bis.close();

                        } catch (IOException ex) {
                            Logger.getLogger(TcpConnections.class.getName()).log(Level.SEVERE, null, ex);
                        }

                        //dos.close();
                        isReadyForSendFile = true;
                    } catch (Exception ex) {

                        Logger.getLogger(TcpConnections.class.getName()).log(Level.SEVERE, null, ex);
                        notifyConnectionCloseRequested();
                    } finally {

                    }
                }
            }
        }.start();

    }

    public BlockingQueue<FileItemModel> getFileQueue() {
        return fileQueue;
    }

    public void waitFilesFromConnection() {

        String fileName;
        try {
            while (bis.available() > 0 && (fileName = dis.readUTF()) != null) {

                System.out.println("dis " + fileName);

                long fileLength = dis.readLong();
                FileItemModel fileItem = new FileItemModel(fileName, 0, "00:00", "");
                runTimerGet(fileItem);

                notifyGetObserversNewFileRequested(fileItem); //notify

                File file = new File(folderPath + "/" + fileName);
                FileOutputStream fos = new FileOutputStream(file);
                BufferedOutputStream bos = new BufferedOutputStream(fos);

                double pertange = 0;
                double totalRead = 0;

                int n = 0;
                byte[] buf = new byte[4096];
                long fileSize = fileLength;
                while (fileSize > 0 && (n = dis.read(buf, 0, (int) Math.min(buf.length, fileSize))) != -1) {
                    fos.write(buf, 0, n);
                    fileSize -= n;
                    totalRead += n;
                    totalTransferedBytesInoneSecondGet += n;
                    pertange = (totalRead * 100) / fileLength;
                    int pertangeFormated = Integer.parseInt(new DecimalFormat("###").format(pertange));

                    notifyGetObserversPercentageChanged(fileItem, pertangeFormated);

                }
                fileItem.setTransferSpeed("Completed!");
                stopTimerGet();
                totalTransferedBytesInoneSecondGet = 0;
                bos.close();

            }
        } catch (IOException ex) {

            Logger.getLogger(TcpConnections.class.getName()).log(Level.SEVERE, null, ex);
            notifyConnectionCloseRequested();
        }
    }
    //dis.close();

    public void closeConnection() throws IOException {
        socket.close();
    }

    public void hookObservers(ITcpIpObserver observer) {
        observers.add(observer);
    }

    public void unHookObservers(ITcpIpObserver observer) {
        observers.remove(observer);
    }

    protected void notifyGetObserversNewFileRequested(FileItemModel file) {
        for (ITcpIpObserver temp : observers) {
            temp.newGetFileRequested(file);
        }
    }

    protected void notifyGetObserversPercentageChanged(FileItemModel file, double pertange) {
        for (ITcpIpObserver temp : observers) {
            temp.percentageChangedGetRequested(file, pertange);
        }
    }

    protected void notifyPostObserversPercentageChanged(FileItemModel file, double pertange) {
        for (ITcpIpObserver temp : observers) {
            temp.percentageChangedPostRequested(file, pertange);
        }
    }

    protected void notifyPostObserversNewFileRequested(FileItemModel file) {
        for (ITcpIpObserver temp : observers) {
            temp.newPostFileRequested(file);
        }
    }

    protected void notifyConnectionCloseRequested() {
        for (ITcpIpObserver temp : observers) {
            temp.connectionFailedRequested();
        }
    }

    protected void notifyServerConnectedRequested(String destinationIP) {
        for (int i = 0; i < observers.size(); i++) {
            observers.get(i).serverConnectedRequested(destinationIP);
        }
    }

    protected void notifyNewFileRequested(FileItemModel model) {
        for (int i = 0; i < observers.size(); i++) {
            observers.get(i).newGetFileRequested(model);
        }
    }

    public AppSettings getSetting() {
        return setting;
    }

    public void setSetting(AppSettings setting) {
        this.setting = setting;
    }

    public boolean isIsRunning() {
        return isRunning;
    }

    public void setIsRunning(boolean isRunning) {
        this.isRunning = isRunning;
    }

    public boolean isIsReadyForSendFile() {
        return isReadyForSendFile;
    }

    public void setIsReadyForSendFile(boolean isReadyForSendFile) {
        this.isReadyForSendFile = isReadyForSendFile;
    }

    public int getPortNumber() {
        return portNumber;
    }

    public void setPortNumber(int portNumber) {
        this.portNumber = portNumber;
    }

    public void stopRunning() {
        isRunning = false;
    }
}
